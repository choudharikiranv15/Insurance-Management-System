const mongoose = require('mongoose');

const claimSchema = new mongoose.Schema({
  claimNumber: {
    type: String,
    unique: true,
    required: false  // Auto-generated by pre-save hook
  },
  policy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Policy',
    required: [true, 'Policy reference is required']
  },
  customer: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: [true, 'Customer reference is required']
  },
  claimType: {
    type: String,
    required: [true, 'Please specify claim type'],
    enum: ['death', 'disability', 'medical', 'accident', 'property_damage', 'theft', 'fire', 'natural_disaster', 'other']
  },
  incidentDate: {
    type: Date,
    required: [true, 'Please provide incident date'],
    validate: {
      validator: function(value) {
        return value <= new Date();
      },
      message: 'Incident date cannot be in the future'
    }
  },
  reportedDate: {
    type: Date,
    default: Date.now
  },
  claimAmount: {
    type: Number,
    required: [true, 'Please specify claim amount'],
    min: [0, 'Claim amount must be positive']
  },
  approvedAmount: {
    type: Number,
    default: 0,
    min: [0, 'Approved amount must be positive']
  },
  description: {
    type: String,
    required: [true, 'Please provide claim description'],
    minlength: [10, 'Description must be at least 10 characters']
  },
  incidentLocation: {
    address: String,
    city: String,
    state: String,
    zipCode: String,
    country: String
  },
  status: {
    type: String,
    enum: ['submitted', 'under_review', 'investigating', 'approved', 'rejected', 'closed', 'cancelled'],
    default: 'submitted'
  },
  priority: {
    type: String,
    enum: ['low', 'medium', 'high', 'urgent'],
    default: 'medium'
  },
  assignedTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  documents: [{
    name: {
      type: String,
      required: true
    },
    url: {
      type: String,
      required: true
    },
    type: {
      type: String,
      enum: ['medical_report', 'police_report', 'photo', 'invoice', 'receipt', 'other'],
      default: 'other'
    },
    uploadDate: {
      type: Date,
      default: Date.now
    },
    verified: {
      type: Boolean,
      default: false
    }
  }],
  statusHistory: [{
    status: {
      type: String,
      required: true
    },
    updatedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: true
    },
    updatedAt: {
      type: Date,
      default: Date.now
    },
    comments: String,
    reason: String
  }],
  investigation: {
    investigator: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    startDate: Date,
    endDate: Date,
    findings: String,
    recommendation: {
      type: String,
      enum: ['approve', 'reject', 'request_more_info', 'escalate']
    },
    notes: [String]
  },
  settlement: {
    settlementDate: Date,
    settlementAmount: Number,
    paymentMethod: String,
    transactionId: String,
    taxDeductions: Number,
    netAmount: Number
  },
  witnesses: [{
    name: String,
    contactNumber: String,
    statement: String
  }],
  rejectionReason: String,
  fraudFlags: [{
    flag: String,
    severity: {
      type: String,
      enum: ['low', 'medium', 'high']
    },
    flaggedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    flaggedAt: {
      type: Date,
      default: Date.now
    }
  }],
  estimatedProcessingDays: {
    type: Number,
    default: 30
  },
  actualProcessingDays: Number,
  customerSatisfaction: {
    rating: {
      type: Number,
      min: 1,
      max: 5
    },
    feedback: String,
    feedbackDate: Date
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Generate claim number
claimSchema.pre('save', async function(next) {
  if (!this.claimNumber) {
    const prefix = 'CLM';
    const timestamp = Date.now().toString().slice(-8);
    this.claimNumber = `${prefix}${timestamp}`;
  }
  next();
});

// Calculate actual processing days when status changes to closed/approved/rejected
claimSchema.pre('save', function(next) {
  if (this.isModified('status') && ['approved', 'rejected', 'closed'].includes(this.status)) {
    const processingTime = new Date() - this.reportedDate;
    this.actualProcessingDays = Math.ceil(processingTime / (1000 * 60 * 60 * 24));
  }
  next();
});

// Add status change to history
claimSchema.pre('save', function(next) {
  if (this.isModified('status') && this.isNew === false) {
    this.statusHistory.push({
      status: this.status,
      updatedBy: this.assignedTo || this.customer,
      updatedAt: new Date()
    });
  }
  next();
});

// Virtual for days since reported
claimSchema.virtual('daysSinceReported').get(function() {
  const now = new Date();
  const diffTime = now - this.reportedDate;
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
});

// Virtual for processing time remaining
claimSchema.virtual('processingTimeRemaining').get(function() {
  if (['approved', 'rejected', 'closed'].includes(this.status)) {
    return 0;
  }
  return Math.max(0, this.estimatedProcessingDays - this.daysSinceReported);
});

// Index for efficient queries
claimSchema.index({ customer: 1, status: 1 });
claimSchema.index({ policy: 1, status: 1 });
claimSchema.index({ assignedTo: 1, status: 1 });
claimSchema.index({ status: 1, priority: 1 });
claimSchema.index({ incidentDate: 1 });
claimSchema.index({ reportedDate: 1 });

module.exports = mongoose.model('Claim', claimSchema);